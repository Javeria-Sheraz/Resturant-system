class menu_item:
    def __init__(self, name, price):
        self.name = name
        self.price = price

    def get_price(self):
        return self.price
    
    def show(self):
        print(f"{self.name} - {self.price}Rs")


# These categories inherit from menu item class
class veg_item(menu_item):
    def get_price(self):
        return self.price
    
class international_item(menu_item):
    def get_price(self):
        return self.price +20
        # extra 20 charges on international food items

# ORDERING LOGIC
class order:
    def __init__(self):
        self.items = []
    # initially the items user will be entering will be an empty list

    def add_items(self, item, quantity):
        self.items.append((item, quantity))

    def remove_item(self, item_to_remove):
        for list_item, qty in self.items:
            if list_item.name == item_to_remove.name:
                if qty > 1:
                    self.items.remove((list_item, qty))
                    self.items.append((list_item, qty -1 ))
                    # goes to list to remove the tuple and its quantity
                    # Then adds a new tuple back into the list, with the same item but one less quantity
                else:
                    self.items.remove((list_item, qty))
                print(f"{list_item.name} removed from your order.")
                return
        print("Item not found in your order...")

    def show_bill(self):
        total = 0
        print("\nFINAL BILL: ")
        #this for loop will go through all the items customer has selected
        for item, quantity in self.items:
            price = item.get_price()
            print(f"{item.name} x {quantity} -> {price}Rs")
            total = total + (price * quantity)
        print(f"\nTOTAL: {total}Rs")
        print("###########")


class Customer:
    def __init__(self, name):
        self.name = name
        self.order = order()

    def place_order(self, menu):
        while True:
            print("\nEnter item number to ADD to order")
            print("Click 'q' to stop ordering. Press 'r' to remove an item...")
            choice = (input("Your choice: "))
            
            if choice == 'q' or choice == 'Q':
                break
            # exit this function

            if choice == 'r' or choice == 'R':
                remove_num = int(input("Enter item number to remove: "))
                self.order.remove_item(menu[remove_num -1])
                continue

            try:
                choice = int(choice)
                if 1 <= choice <= len(menu):
                    quantity = int(input("Enter Quantity: "))
                    self.order.add_items(menu[choice -1], quantity)
                    print(f"{quantity} {menu[choice-1].name} added to your order")
                else:
                    print("Invalid choice")
            except ValueError:
                print("Please enter a valid number or 'q' to quit.")

    def show_summary(self):
        print(f"\nCustomer: {self.name}")
        print("###########")
        self.order.show_bill()


menu = [
    veg_item("Vegetable Rice", 200),
    veg_item("Vegatable salad", 70),
    veg_item("Mashed potato Platter", 140),
    international_item("Pasta", 300),
    international_item("Burger", 220),
    international_item("Cheezy sticks", 350),
    international_item("Pizza", 750),
    international_item("Soda can", 120),
]

print("Welcome to our resturant!")
print("*****************")
print("MENU:\n")

for idx, item in enumerate(menu):
    print(f"{idx + 1}. ", end = "")
    item.show()
# end is keyword argument within print() function. 
# It controls what character or string is printed at the very end of the output generated by a print() statement.
print("*****************")

name = input("\nEnter your name: ")
customer = Customer(name)
# user's name is passed to the customer class
customer.place_order(menu)
customer.show_summary()
print("\nThank you for ordering! Visit again.")



